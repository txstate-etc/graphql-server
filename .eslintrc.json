{
  "extends": "standard-with-typescript",
  "parserOptions": {
      "project": "./tsconfig.eslint.json"
  },
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-unsafe-argument": "off", // when I use 'any' I mean it
    "@typescript-eslint/restrict-template-expressions": ["error", { "allowAny": true }], // `${myVar}` is fine if myVar is `any`
    "@typescript-eslint/return-await": ["error", "always"],
    "@typescript-eslint/strict-boolean-expressions": "off",
    "@typescript-eslint/prefer-nullish-coalescing": ["error", { "ignoreConditionalTests": true }],
    "@typescript-eslint/prefer-readonly": "off",
    "@typescript-eslint/indent": [
      "error",
      2,
      {
        "ignoredNodes": [
          "PropertyDefinition[decorators]",
          "TSUnionType"
        ]
      }
    ]
  }
}
